[["index.html", "Introduction to Version Control Overview", " Introduction to Version Control Dr. Carl Stahmer and Dr. Tyler Shoemaker 2022-01-31 Overview This workshop covers the fundamentals of using version control for reproducible research. Topics covered will include installing the Git versioning control software locally, initiating a local Git repository, managing file versions, basic branching and merging, and time permitting intermediate topics including working with remote repositories and resolving conflicts. At the end of this workshop learners should be able to create new repos and begin using Git for version control of their individual projects. "],["introduction.html", "1 Introduction 1.1 Interactive Session Information 1.2 About this Tutorial 1.3 Learning Objectives", " 1 Introduction This workshop covers the basics of using Git to track and record changes to files on your local computer. This allows you to compare versions over time, recall earlier changes you made, and effectively collaborate on writing code and documents. This is a hybrid workshop. First, read independently work through sections 1-3 of this reader at your own pace and ensure that you have successfully installed Git on your local computer. Next, join us for the live, interactive session (details below), during which we will use Git to learn and practice how to manage files on our local computers.If you need help troubleshooting your installation, drop-in to DataLab’s office hours prior to the interactive session to ensure that you will be able to follow along on your own machine. The full workshop description can be found here. 1.1 Interactive Session Information The workshop includes a live, interactive session to be held via Zoom on Wednesday, February 15, 2021 from 3:00 pm to 5:00 pm. Zoom login information will be sent to all registered participants via email; reach out to datalab-training@ucdavis.edu the day prior if you received a registration confirmation but have not received your Zoom link. 1.2 About this Tutorial This online tutorial provides background information that will help participants to better understand the concepts introduced during the interactive session. It also includes information to help you successfully install Git on your local computer, which must be completed prior to the interactive session. Instructions for installing Git are in section 3. 1.3 Learning Objectives Describe the history of version control systems (VCS), including their value and function Explain how a VCS manges files on your computer Successfully install and run Git on your local computer Interact with Git via your computer’s command line Successfully create local repositories and place your files under version control Compare multiple versions of the same file and roll back to earlier versions Perform basic branching and merging operations Identify where to go to learn more "],["version-control.html", "2 Version Control 2.1 What is Version Control? 2.2 Software Assisted Version Control 2.3 Local vs Server-based Version Control 2.4 Central Version Control Systems 2.5 Distributed Version Control Systems 2.6 The Best of Both Worlds 2.7 VCS and the Computer File System 2.8 How Computers Store and Access Information 2.9 How VCS Manage Your Files 2.10 Graph-Based Data Management", " 2 Version Control 2.1 What is Version Control? Version control describes a process of storing and organizing multiple versions (or copies) of documents that you create. Approaches to version control range from simple to complex and can involve the use of various human workflows and/or software applications to accomplish the overall goal of storing and managing multiple versions of the same document(s). Most people have a folder/directory somewhere on their computer that looks something like this: Or perhaps, this: This is a rudimentary form of version control that relies completely on the human workflow of saving multiple versions of a file. This system works minimally well, in that it provides you with a history of file versions theoretically organized by their time sequence. But this file system method offers no information about how the file has changed from version to version, why you might have saved a particular version, or specifically how the various versions are related. This human-managed file system approach is more subject to error than software-assisted version control systems; it is not uncommon for users to make mistakes when naming file versions, or to go back and edit files out of sequence. Software-assisted version control systems (VCS) such as Git were designed to solve this problem. 2.2 Software Assisted Version Control Version control software has its roots in the software development community, where it is common for many coders to work on the same file, sometimes synchronously, amplifying the need to track and understand revisions. But nearly all types of computer files, not just code, can be tracked using modern version control systems. IBM’s OS/360 IEBUPDTE software update tool is widely regarded as the earliest and most widely adopted precursor to modern, version control systems. Its release in 1972 of the Source Code Control System (SCCS) package marked the first, fully fledged system designed specifically for software version control. Today’s marketplace offers many options when it comes to choosing a version control software system. They include systems such as Git, Visual Source Safe, Subversion, Mercurial, CVS, and Plastic SCM, to name a few. Each of these systems offers its twist on version control, differing sometimes in the area of user functionality, sometimes in how it handles things on the back-end, and sometimes both. This tutorial focuses on the Git VCS, but in the sections that follow we offer some general information about classes of version control systems to help you better understand how Git does what it does and to help you make more informed decisions about how to deploy it for you own work. 2.3 Local vs Server-based Version Control There are two general types of version control systems: local and server (sometimes called cloud) based systems. When working with a local version control system, all files, metadata, and everything associated with the version control system live on your local drive in a universe unto itself. Working locally is a perfectly reasonable option for those who work independently (not as part of a team), have no need to regularly share their files or file versions, and who have robust back-up practices for their local storage drive(s). Working locally is also sometimes the only option for projects involving protected data and/or proprietary code that cannot be shared. Server-based VCS utilize software running on your local computer that communicates with a remote server (or servers) that store your files and data. Depending on the system being deployed, files and data may reside exclusively on the server and are downloaded to temporary local storage only when a file is being actively edited. Or, the system may maintain continuous local and remote versions of your files. Server-based systems facilitate team science because they allow multiple users to have access to the same files, and all their respective versions, via the server. They can also provide an important, non-local back-up of your files, protecting you from loss of data should your local storage fail. Git is a free server-based version control system that can store files both locally and on a remote server. While the sections that follow offer a broader description of server-based version control, in this workshop we will focus only on using Git locally and will not configure the software to communicate with, store files on, or otherwise interact with a remote server. DataLab’s companion Git for Teams workshop focuses on using Git with the GitHub cloud service to capitalize on Git’s distributed version control capabilities. Server-based version control systems can generally be segmented into two distinct categories: 1) Centralized Version Control Systems (Centralized VCS) and 2) Distributed Version Control Systems (Distributed VCS). 2.4 Central Version Control Systems Centralized VCS is the oldest and the predominant form of version control architecture worldwide. Centralized VCS implement a “spoke and wheel” architecture to provided server-based version control. With the spoke and wheel architecture, the server maintains a centralized collection of file versions. Users utilize version control clients to “check-out” a file of interest to their local file storage, where they are free to make changes to the file. Centralized VCS typically restrict other users from checking out editable versions of a file if another user currently has the file checked out. Once the user who has checked out the file has finished making changes, they “check-in” their new version, which is then stored on the server from where it can be retrieved and “checked-out” by another user. Taken together, centralized VCS provide a very controlled and ordered universe that ensures file integrity and tracking of changes. However, this regulation comes at a cost: namely, it it reduces the ease with which multiple users can work simultaneously on the same file. 2.5 Distributed Version Control Systems Distributed VCS are not dependent on a central repository as a means of sharing files or tracking versions. Distributed VCS implement a network architecture (as opposed to the spoke and wheel of the centralized VCS as pictured above) to allow each user to communicate directly with every other user. In distributed VCS, each user maintains their own version history of the files being tracked, and the VCS software communicates between users to keep the various local file systems in sync with each other. With this type of system, the local versions of two different users will diverge from each other if both users make changes to the file. This divergence will remain in place until the local repositories are synced, at which time the VCS stitches (or merges) the two different versions of the file into a single version that reflects the changes made by each individual, and then saves the stitched version of the file onto both systems as the current version. Various mechanisms can then be used to resolve the conflicts that may arise during this merge process. Distributed VCS offer greater flexibility and facilitate collaborative work, but a lack of understanding of the sync/merge workflow can cause problems. It is not uncommon for a user to forget to sync their local repository with the repositories of other team members and, as a result, work for extended periods of time on outdated files that don’t reflect their teammates and result in work inefficiencies and merge challenges. 2.6 The Best of Both Worlds An important feature of distributed VCS is that many users and organizations choose to include a central server as a node in the distributed network. This creates an hybrid universe in which some users will sync directly to each other while other users will sync through a central server. Syncing with a cloud-based server provides an extra level of backup for your files and also facilitates communication between users. But treating the server as just another node on the network (as opposed to a centralized point of control) puts the control and flexibility back in the hands of the individual developer. For example, in a true centralized VCS, if the server goes down then nobody can check files in and out of the server, which means that nobody can work. But in a distributed VCS this is not an issue. Users can continue to work on local versions and the system will sync any changes when the server becomes available. Git, the focus of this tutorial, is a Distributed VCS. You can use Git to share and sync repositories directly with other users or through a central Git server such as GitHub or GitLab. 2.7 VCS and the Computer File System When we think about version control, we typically think about managing changes to individual files. From the user perspective, the file is typically the minimum accessible unit of information. Whether working with images, tabular data, or written text, we typically use software to open a file that contains the information we want to view or edit. As such, it comes as a surprise to most users that the concept of files, and their organizing containers (folders or directories), are not intrinsic to how computers themselves store and interact with data. In this section of the tutorial we will learn about how computers store and access information and how VCS interact with this process to track and manage files. 2.8 How Computers Store and Access Information For all of their computing power and seeming intelligence, computers still only know two things: 0 and 1. In computer speak, we call this a binary system, and the unit of memory on a hard-disk, flash drive, or computer chip that stores each 1 or 0 is called a bit.You can think of your computer’s storage device (regardless of what kind it is) as a presenting a large grid, where each box is a bit: In the above example, as with most computer storage, the bits in our storage grid are addressable, meaning that we can designate a particular bit using a row and column number such as, for example, A7, or E12. Also, remember, that each bit can only contain one of two values: 0 or 1. So, in practice, our storage grid would actually look something like this: All of the complex information that we store in the computer is translated to this binary language prior to storage using a system called Unicode. You can think of Unicode as a codebook that assigns a unique combination of 8, 16, 32, 64, etc. (depending on how old your computer is) ones and zeros to each letter, numeral, or symbol. For example, the 8-bit Unicode for the upper case letter “A” is 01000001, and the 8-bit Unicode character for the digit “3” is 00110011. The above grid actually spells out the phrase, “Call me Ishmael”, the opening line of Herman Melville’s novel Moby Dick. An important aspect of how computers story information in binary form is that, unlike most human readable forms of data storage, there is no right to left, up or down, or any other regularized organization of bits on a storage medium. When you save a file on your computer, the computer simply looks for any open bits and starts recording information. The net result is that the contents of single file are frequently randomly interleaved with data from other files. This mode of storage is used because it maximizes the use of open bits on the storage device. But it presents the singular problem of not making data readable in a regularized, linear fashion. To solve this problem, all computers reserve a particular part of their internal memory for a directory that stores a sector map of all chunks of data. For example, if you create a file called README.txt with the word “hello” in it, the computer would randomly store the Unicode for the five characters in the word “hello” on the storage device and make a directory entry something like the following: Understanding the directory concept and how computers store information is crucial to understanding how VCS mange your files. 2.9 How VCS Manage Your Files Most users think about version control as a process of managing files. For example, if I might have a directory called My Project that holds several files related to this project as follows: One approach to managing changes to the above project files would be to store multiple versions of each file as in the figure below for the file analysis.r: In fact, many VCS do exactly this. They treat each file as the minimum unit of data and simply save various versions of each file along with some additional information about the version. This approach can work reasonably well. However, it has limitations. First, this approach can unnecessarily consume space on the local storage device, especially if you are saving many versions of a very large file. It also has difficulty dealing with changes in file names, typically treating the same file with a new name as a completely new file, thereby breaking the chain of version history. To combat these issues, good VCS don’t actually manage files at all. They manage directories. Distributed VCS like Git take this alternate approach to data storage that is directory, rather than file, based. 2.10 Graph-Based Data Management Git (and many other distributed VCS) manage your files as collections of data rather than collections of files. Git’s primary unit of management is the repository, or repo for short, which is aligned with your computer’s directory/folder structure. Consider, for example, the following file structure: Here we see a user, Tom’s, home directory, which contains three sub directories (Data, Thesis, and Tools) and one file (Notes.txt). Both the Data and Tools directories contain sub files and/or directories. If Tom wanted to track changes to the two files in the Data directory, he would first create a Git repository by placing the Data directory under version control. When a repository is created, the Git system writes a collection of hidden files into the data directory that it uses to store information about all of the data that lives under that directory. This includes information about the addition, renaming, and deletion of both files and folders as well as information about changes to the data contained in the files themselves. Additions, deletions and versions of files are tracked and stored not as copies of files, but rather as a set of instructions that describes changes made to the underling data and the directory structure that describes them. "],["installing-git.html", "3 Installing Git 3.1 Git on Windows 3.2 Git on Mac 3.3 Verifying Your Install 3.4 Installation Troubleshooting 3.5 Git on the Command Line 3.6 Ready, Set, Go…", " 3 Installing Git In order to run Git version control and be ready for the interactive session of this workshop, you need to install it on your local machine. This is required preparation and we will not have time during the interactive session to help you troubleshoot installation issues. If you don’t have Git installed, you won’t be able to follow along with the activities. Git installation is typically an easy, point and click process, but there are some configuration steps along the way to which you’ll need to pay attention and thus we recommend that you try this well in advance of the workshop so you have time to troubleshoot your install if necessary. 3.1 Git on Windows Follow these step-by-step instructions if you’re installing Git on a Windows machine: First, launch a web browser, the image below shows the Microsoft Edge browser: Next, navigate to the following Git download URL in your browser https://git-scm/com/downloads: Select “Windows” from the Downloads portion of the Git web page. Git will display the following page and automatically being downloading the correct version of the Git software. If the download doesn’t start automatically, click on the “Click here to download manually link”: When the download is complete, open/Run the downloaded file (will look different in different browsers, but everyone shoudl know how to do this): A screen will appear asking for permissions for the Git application to make changes to your device. Click on the Yes button: Click Next to accept the user license: Leave the default “Destination Location” unchanged (usually C:Files) and hit Next You will see a screen like the one below asking you to “Select Components”: Leave all of the default components selected and also check the boxes next to “Additional Icons” and its sub-item, “On the Desktop”. Your completed configurations window should have the following compenents selected: Additional Icons -&gt; On the Desktop Windows Explorer integration -&gt; Git Bash Here -&gt; Git GUI Here Git LFS (Large File Support) Associate .git* configuration files with default text editor Associate .sh files to be run with Bash And should look like this: After verifying that you have the necessary components selected as per above, hit Next. The next screen will ask you to “Select a Start Menu Folder.” Keep the default value of Git and hit Next: Leave the default “Use Vim (the ubiquitous text editor) as Git’s default editor” selected on the “Choosing the default editor used by Git” screen and hit Next: On the next screen, leave the default “let Git decide” option selected and hit Next: Leave the default “Git from the command line and also from 3rd-party software” selected and hit Next: On the next “Choosing HTTPS transport backend” page leave the default “Use the OpenSSL library” option selected and hit Next: Leave the default “Checkout Windows-style, commit Unix-style line endings” selected on the next page and hit Next: Keep the default “Use MinTTY (the default terminal of MSYS2)” selected on the “Configuring the terminal emulator to use with Git Bash” window and hit Next: Keep the default value of “Default (fast-forward or merge)” on the “Choose the default behavior of ‘git pull’” page and hit Next: Keep the default value of “Git Credential Manager Core” on the “Choose a credential helper” page and hit Next: Keep the default values on the “Configuration extra options” page by keeping “Enable file system caching” checked and “Enable symbolic links” unchecked and then hit Next: Make sure that no options are checked in the “Configuring experimental options” page and hit Install: After you hit this Install button as per above, you will see an install progress screen like the one below: When the install is complete, a new, “Completing the Git Setup Wizard” window like the one below will appear: Make sure that all of the options on this window are unchecked as in the image below and then hit the Finish button: This will complete your installation process. Windows users should verify that when downloading Git for Windows they have also installed Git Bash, which is necessary for working with Git in command line. 3.2 Git on Mac If you are installing Git on a Mac, there is no extra configuration.Simply go the Git download page at https://git-scm.com/downloads and choose the latest version for Mac, and run the installer package when it is finished downloading. If you get an “unknown developer” warning during the install process, follow the instructions at the beginning of the video at https://www.youtube.com/watch?v=__kr-Ew5kbE to help you work through this problem. 3.3 Verifying Your Install Whether you’re installing on Windows or Mac, note that unlike most applications that you’ve installed before, you will not find a “Git” application in your programs or applications directory once the installation is complete. As long as you don’t get an explicit error message during the installation process, you can assume that the software was successfully installed. Git is a command-line application with which you interact using the command-line, which we’ll cover during the interactive session. If you’re already familiar with using command line, you can verify your install by opening the terminal (for Windows that will be Git Bash) and type git --version. You should then see a response of your installed version (e.g., git version 2.12.2.windows.2, or git version 2.12.2.mac.2), and not the error “command not found.” 3.4 Installation Troubleshooting If you are not able to successfully install Git on your own, please attend DataLab’s Virtual Office Hours, which are held every Wednesday from 1:30 to 3:00 pm, to get help with your installation. Click here for more information and to receive a Zoom link. 3.5 Git on the Command Line There are several Graphical User Interfaces that allow you to interact with Git on your computer, but Git is, at heart, a command line interface. The command line offers a text-only, non graphical means of interacting with your computer. In the beginning, all user interaction with the computer happened at the command line. In the current days of graphical user interfaces, using the command line requires you to launch a special program that provides command Line access. Mac users will use an application called “Terminal” which ships by default with the Mac operating system. To launch the Terminal application, go to: Applicaitons -&gt; Utilities -&gt; Terminal When you launch the application, you will see something like this: Windows users will use an application called Git Bash, which was installed on your system when you installed Git. To launch Git Bash, go to: Click on the Windows Start Menu and search for “Git Bash” Alternatively, Click on the Windows Start Menu, select Programs, and browse to Git Bash When you launch the application, you will see something like this: 3.6 Ready, Set, Go… If you’ve read and understood the information in this online tutorial and successfully installed Git on your local machine, you’re ready for the interactive session! The sections that follow present exhibits to which we will refer during the live session. "],["creating-your-first-repo.html", "4 Creating Your First Repo 4.1 Save, Stage, Commit 4.2 Your First Repo 4.3 Checking the Status of a Repo 4.4 Version of a File 4.5 View a History of Your Commits 4.6 Comparing Commits 4.7 Comparing Files", " 4 Creating Your First Repo 4.1 Save, Stage, Commit Git does not automatically preserve versions of every “saved” file. When working with Git, you save files as you always do, but this has no impact on the versions that are preserved in the repository. To create a “version”, you must first add saved files to a staging area and then “commit” your staged files to the repository. The commits that you make constituted the versions of files that are preserved in the repository. 4.2 Your First Repo Using the command line, move to your Home directory $ cd ~ note: The $ character represents your command prompt. DO NOT type it into your terminal Create a new directory for this workshop $ mkdir intro_to_git Change to the new directory $ cd intro_to_git Put the new directory under version control $ git init 4.3 Checking the Status of a Repo To check the status of a repository use the following command $ git status 4.4 Version of a File In Git-speak, we “commit” if version of a file to the repository to save a copy of the current working version of a file as a version. This is a multi-step process in which we first “stage” the file to be committed and then “commit” the file. STEP 1: Place the file you want to version into the Staging Area $ git add &lt;filename&gt; Replace in the command above with the actual name of the file you want to version. STEP 2: Commit Staged Files $ git commit -m &#39;A detailed comment explaining the nature of the version being committed. Do not include any apostrophe&#39;s in your comment.&#39; 4.5 View a History of Your Commits To get a history of commits $ git log To see commit history with patch data (insertions and deletions) for a specified number of commits $ git log -p -2 To see abbreviated stats for the commit history $ git log --stat 4.6 Comparing Commits $ git diff &lt;commit&gt; &lt;commit&gt; 4.7 Comparing Files $ git diff &lt;commit&gt; &lt;file&gt; or $ git diff &lt;commit&gt;:&lt;file&gt; &lt;commit&gt;:&lt;file&gt; "],["git-branching.html", "5 Git Branching 5.1 Merging Branches 5.2 Branching Workflows 5.3 To View an Earlier Commit", " 5 Git Branching Branching provides a simple way to maintain multiple, side-by-side versions of the files in a repository. Conceptually, branching a repository creates a copy of the codebase in its current state that you can work on without affecting the primary version from which it was copied. This allows you to work down multiple paths without affecting the main (or other) codebase. To see a list of branches in your repository $ git branch To create a new branch $ git checkout -b hotfix New branches are created of the current working branch. To change branches use $ git checkout &lt;branch name&gt; 5.1 Merging Branches When you merge a branch, git folds any changes that you made to files in an identified branch into the current working branch. It also adds any new files. When you perform a merge, a new commit will be automatically created to track the merge. To merge branches, commit any changes to the branch you want to merge (in this example, the hotfix branch) then checkout the branch into which you want to merge (for example, master), and then execute a merge command. $ git commit -m &#39;commiting staged files in hotfix branch&#39; $ git checkout master $ git merge hotfix 5.2 Branching Workflows 5.3 To View an Earlier Commit $ git checkout &lt;commit&gt; To solve detached head problem, either RESET HEAD as described below or just checkout another branch git checkout &lt;branch&gt; To save this older version as a parallel branch execute $ git checkout -b &lt;new_branch_name This will save the older commit as a new branch running parallel to master. "],["troubleshooting-problems-and-fixing-mistakes.html", "6 Troubleshooting Problems and Fixing Mistakes 6.1 Undoing Things 6.2 When Things go Wrong!", " 6 Troubleshooting Problems and Fixing Mistakes 6.1 Undoing Things One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the --amend option $ git commit --amend To unstage a file for commit use $ git reset HEAD &lt;file&gt; Throwing away changes you’ve made to a file $ git checkout -- &lt;file&gt; Rolling everything back to the last commit $ git reset --hard HEAD Rolling everything back to the next to last commit (The commit before the HEAD commit) $ git reset --hard HEAD^ Rolling everything back to two commits before the head $ git reset --hard HEAD^2 Rolling everything back to an identified commit using HASH/ID from log $ git reset --hard &lt;commit&gt; 6.2 When Things go Wrong! To reset everything back to an earlier commit and make sure that the HEAD pointer is pointing to the newly reset HEAD, do the following $ git reset --hard &lt;commit&gt; $ git reset --soft HEAD@{1} "],["additional-resources.html", "7 Additional Resources 7.1 Git for Teams 7.2 The Git Book", " 7 Additional Resources 7.1 Git for Teams Be on the lookout for the second workshop in DataLab’s Git workshop series, which covers the process of using Git to work with teams performing collaborative development. 7.2 The Git Book The Git Book is the definitive Git resource and provides an excellent reference for everything that we will cover in the interactive session. There is no need to read the book prior to the session, but it’s a good reference resource to have avaialable as you begin to work with Git after the workshop. "]]
